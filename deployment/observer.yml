AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

##########################################################################
#  Parameters                                                            #
##########################################################################
Parameters:
  TelegramApiKey:
    Type: String
  GBApiKey:
    Type: String
  BucketName:
    Type: String
    Default: wev-observer-bucket

##########################################################################
#  Global values that are applied to all resources                       #
##########################################################################
Globals:
  Function:
    MemorySize: 512
    Architectures: ["arm64"]
    Runtime: provided.al2
    Timeout: 29
    Layers:
      - !Sub arn:aws:lambda:eu-west-1:580247275435:layer:LambdaInsightsExtension-Arm64:2

Resources:
##########################################################################
#   Lambda Functions                                                     #
##########################################################################
  # BotHandlerLogs:
  #   Type: AWS::Logs::LogGroup
  #   Properties:
  #     RetentionInDays: 1
  #     LogGroupName: !Sub "/aws/lambda/web-observer-handler-${AWS::StackName}"

  # BotHandlerFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     FunctionName: !Sub ev-bot-handler-${AWS::StackName}
  #     FunctionUrlConfig:
  #       AuthType: NONE
  #     CodeUri: ../build/bot.zip
  #     Handler: main
  #     Policies:
  #       - AWSLambdaBasicExecutionRole
  #       - DynamoDBCrudPolicy:
  #           TableName: StationAvailability
  #     Environment:
  #       Variables:
  #         TELEGRAM_BOT_TOKEN: !Ref TelegramApiKey
  #         APIKEY: !Ref GBApiKey
  #   DependsOn:
  #     - BotHandlerLogs
    
  # ChargeStationTrackerLogs:
  #   Type: AWS::Logs::LogGroup
  #   Properties:
  #     RetentionInDays: 1
  #     LogGroupName: !Sub "/aws/lambda/ev-chargestation-tracker-${AWS::StackName}"

  # ChargeStationTrackerFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     FunctionName: !Sub ev-chargestation-tracker-${AWS::StackName}
  #     CodeUri: ../build/tracker.zip
  #     Handler: main
  #     Timeout: 900
  #     Policies:
  #       - AWSLambdaBasicExecutionRole
  #       - DynamoDBCrudPolicy:
  #           TableName: StationAvailability
  #     Environment:
  #       Variables:
  #         TELEGRAM_BOT_TOKEN: !Ref TelegramApiKey
  #         APIKEY: !Ref GBApiKey
  #     Events:
  #       TriggerSchedule:
  #         Type: Schedule
  #         Properties:
  #           Schedule: rate(5 minutes)
  #           Name: !Sub tracker-trigger-${AWS::StackName}
  #           Description: tracker schedule
  #           Enabled: True

  #   DependsOn:
  #     - ChargeStationTrackerLogs

##########################################################################
#   DynamoDb Tables                                                      #
##########################################################################
  JobsTrackerTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ObserverTraces
      AttributeDefinitions:
        - AttributeName: URL
          AttributeType: S
      KeySchema:
        - AttributeName: URL
          KeyType: HASH
      BillingMode: PROVISIONED
      ProvisionedThroughput: 
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"

##########################################################################
#   S3 Bucket                                                      #
##########################################################################
  InputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: wev-observer-bucket
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - '*'
            AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - POST
            MaxAge: 3000
      LifecycleConfiguration:
        Rules:
          - Id: DeleteLifeCyclePolicy
            Status: Enabled
            ExpirationInDays: 30
    
  InputBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: InputBucket
    Properties:
      Bucket: !Ref InputBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: web-observer-policy
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
            Principal:
              Service: 
                - lambda.amazonaws.com
            Resource:
              - !Sub "arn:aws:s3:::${BucketName}"
              - !Sub "arn:aws:s3:::${BucketName}/*"

Outputs:
  InputBucket:
    Value: 
      Ref: InputBucket
    Export: 
      Name: !Sub s3-bucket-${AWS::StackName}
